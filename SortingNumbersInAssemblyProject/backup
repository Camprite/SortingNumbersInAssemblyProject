
	petlaSortujaca:
	;WCZYTYWANIE PIERWSZEGO ZNAKU
	MOV EBX, OFFSET buforPierwszy
	wczytajZnak:
	invoke ReadFile, openedFileHandle, EBX , 1, OFFSET  inputCharsReaded, 0
	INC distancePierwsza
	INC distance
		INC ECX
	.IF BYTE PTR [EBX] == 59
		MOV BYTE PTR [EBX], 00
		MOV EBX, OFFSET buforPierwszy
		DEC EBX
		MOV EAX, 1
		MOV ECX, 0
	.ENDIF

	INC EBX
	
	.IF inputCharsReaded == 0
		MOV EDX, distancePierwsza
		invoke SetFilePointer, openedFileHandle, EDX, 0, FILE_BEGIN
		jmp koniecPliku
		MOV ECX, 0
	.ENDIF
	
	.IF ECX > 0
		DEC ECX
		JMP wczytajZnak
	.ENDIF


	
	push OFFSET buforPierwszy
	call ScanInt
	MOV liczba1, EAX

	dalej:
		;WCZYTYWANIE DRUGIEGO ZNAKU
		MOV EBX, OFFSET buforDrugi
	wczytajZnak1:
	invoke ReadFile, openedFileHandle, EBX , 1, OFFSET  inputCharsReaded, 0
	INC distanceDruga
	INC distance
		INC ECX
	.IF BYTE PTR [EBX] == 59
		MOV BYTE PTR [EBX], 00
		MOV EBX, OFFSET buforDrugi
		DEC EBX
		MOV EAX, 1
		MOV ECX, 0
	.ENDIF

	INC EBX
	
	.IF inputCharsReaded == 0
		jmp petlaSortujaca
	.ENDIF
	
	.IF ECX > 0
		DEC ECX
		JMP wczytajZnak1
	.ENDIF
	
	push OFFSET buforDrugi
	call ScanInt
	MOV liczba2, EAX

	MOV EBX, liczba2
	.IF liczba1 > EBX
		MOV EDX, distance
		SUB EDX, distancePierwsza
		SUB EDX, distanceDruga
		invoke SetFilePointer, openedFileHandle, EDX, 0, FILE_BEGIN
		invoke lstrlenA, OFFSET  buforDrugi;
		invoke WriteFile, openedFileHandle, OFFSET buforDrugi, EAX, bytesWritten,0
		invoke WriteFile, openedFileHandle, OFFSET separator, 1, bytesWritten,0


		invoke lstrlenA, OFFSET  buforPierwszy;
		invoke WriteFile, openedFileHandle, OFFSET buforPierwszy, EAX, bytesWritten,0
		invoke WriteFile, openedFileHandle, OFFSET separator, 1, bytesWritten,0
		JMP dalej
	.ENDIF
	JMP dalej
	koniecPliku:



\







	.IF min == 0FFFFFFFFh
		JMP wyjdz
	.ENDIF
	
	invoke dwtoa,min, OFFSET  bufor

	invoke lstrlenA, OFFSET  bufor;
	 
	invoke WriteFile, tempFileHandle, OFFSET bufor, EAX, bytesWritten,0
	invoke WriteFile, tempFileHandle, OFFSET separator, 1, bytesWritten,0
	;Zamien najmniejszÄ… liczbe separatorami 

	invoke SetFilePointer, openedFileHandle, distanceMin, 0, FILE_BEGIN
	invoke lstrlenA, OFFSET bufor;
	MOV EBX, EAX
	DEC EBX
	nadpiszSeparatorami:
	
	invoke WriteFile, openedFileHandle, OFFSET separator, 1, bytesWritten,0
	DEC EBX
	cmp EBX, 0
	JE nadpiszSeparatorami
	JMP znajdzNajmniejsza





	wyjdz:











    	.IF liczba1 < ECX
		MOV EAX,liczba1
		MOV min, EAX
		MOV EAX, distance
		MOV distanceMin, EAX

		invoke lstrlenA, OFFSET buforPierwszy;
		sub distanceMin, EAX
		DEC distanceMin
		JMP wczytajZnak
	.ENDIF
